<?xml version="1.0" encoding="utf-8" ?>
<DMSScript options="272" xmlns="http://www.skyline.be/automation">
	<Name>LogicalLayer</Name>
	<Description />
	<Type>Automation</Type>
	<Author>SKYLINE2\RDM</Author>
	<CheckSets>FALSE</CheckSets>
	<Folder />

	<Protocols>
	</Protocols>

	<Memory>
	</Memory>

	<Parameters>
	</Parameters>

	<Script>
		<Exe id="1" type="csharp">
			<Value>
				<![CDATA[using LogicalLayer_1.Utils;
using Skyline.DataMiner.Automation;
using Skyline.DataMiner.CICD.Models.Protocol.Edit;
using Skyline.DataMiner.CICD.Models.Protocol.Enums;
using Skyline.DataMiner.CICD.Models.Protocol.Read;
using Skyline.DataMiner.CICD.Parsers.Common.Xml;
using Skyline.DataMiner.Core.DataMinerSystem.Automation;
using Skyline.DataMiner.Net.Messages;
using Skyline.DataMiner.Utils.InteractiveAutomationScript;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Remoting.Channels;
using System.Text;
using System.Threading.Tasks;

//---------------------------------
// LogicalLayer_1.cs
//---------------------------------
/*
****************************************************************************
*  Copyright (c) 2024,  Skyline Communications NV  All Rights Reserved.    *
****************************************************************************

By using this script, you expressly agree with the usage terms and
conditions set out below.
This script and all related materials are protected by copyrights and
other intellectual property rights that exclusively belong
to Skyline Communications.

A user license granted for this script is strictly for personal use only.
This script may not be used in any way by anyone without the prior
written consent of Skyline Communications. Any sublicensing of this
script is forbidden.

Any modifications to this script by the user are only allowed for
personal use and within the intended purpose of the script,
and will remain the sole responsibility of the user.
Skyline Communications will not be responsible for any damages or
malfunctions whatsoever of the script resulting from a modification
or adaptation by the user.

The content of this script is confidential information.
The user hereby agrees to keep this confidential information strictly
secret and confidential and not to disclose or reveal it, in whole
or in part, directly or indirectly to any person, entity, organization
or administration without the prior written consent of
Skyline Communications.

Any inquiries can be addressed to:

	Skyline Communications NV
	Ambachtenstraat 33
	B-8870 Izegem
	Belgium
	Tel.	: +32 51 31 35 69
	Fax.	: +32 51 31 01 29
	E-mail	: info@skyline.be
	Web		: www.skyline.be
	Contact	: Ben Vandenberghe

****************************************************************************
Revision History:

DATE		VERSION		AUTHOR			COMMENTS

25/04/2024	1.0.0.1		RDM, Skyline	Initial version
****************************************************************************
*/

namespace LogicalLayer_1
{
	using System;
	using System.Collections.Generic;
	using System.Globalization;
	using System.Text;
    using LogicalLayer_1.ChoseObject;
    using LogicalLayer_1.ParameterMonitor;
    using Newtonsoft.Json;
    using Skyline.DataMiner.Automation;
    using Skyline.DataMiner.Core.DataMinerSystem.Automation;
    using Skyline.DataMiner.Net.Serialization;
    using Skyline.DataMiner.Utils.InteractiveAutomationScript;

    /// <summary>
    /// Represents a DataMiner Automation script.
    /// engine.ShowUI();
    /// </summary>
    public class Script
    {
        private InteractiveController app;
        private IEngine engine;

        /// <summary>
        /// The script entry point.
        /// </summary>
        /// <param name="engine">Link with SLAutomation process.</param>
		public void Run(IEngine engine)
		{
			try
            {
                app = new InteractiveController(engine);
                this.engine = engine;
                engine.SetFlag(RunTimeFlags.NoKeyCaching);
                RunSafe(engine);
			}
			catch (ScriptAbortException)
			{
				// Catch normal abort exceptions (engine.ExitFail or engine.ExitSuccess)
				throw; // Comment if it should be treated as a normal exit of the script.
			}
			catch (ScriptForceAbortException)
			{
				// Catch forced abort exceptions, caused via external maintenance messages.
				throw;
			}
			catch (ScriptTimeoutException)
			{
				// Catch timeout exceptions for when a script has been running for too long.
				throw;
			}
			catch (InteractiveUserDetachedException)
			{
				// Catch a user detaching from the interactive script by closing the window.
				// Only applicable for interactive scripts, can be removed for non-interactive scripts.
				throw;
			}
			catch (Exception e)
			{
				engine.ExitFail("Run|Something went wrong: " + e);
			}
		}

		private void RunSafe(IEngine engine)
        {
			var chooseObjectView = new ChooseObjectView(engine);
            chooseObjectView.OnParameterMonitorPressed += ChooseObject_OnParameterMonitorPressed;
			app.Run(chooseObjectView);
        }

        private void ChooseObject_OnParameterMonitorPressed(object sender, EventArgs e)
        {
			var parameterMonitorView = new ParameterMonitorView(engine);
            parameterMonitorView.OnAddPressed += ParameterMonitorView_OnAddPressed;
			app.ShowDialog(parameterMonitorView);
        }

        private void ParameterMonitorView_OnAddPressed(object sender, ParameterMonitorEventArgs e)
        {
			var element = engine.FindElement("Logical Layer");
			element.SetParameter(3, JsonConvert.SerializeObject(new ParameterMonitorModel
			{
				ParameterMonitorName = e.ParameterMonitorName,
				ElementName = e.Element.ElementName,
				ElementDmaId = e.Element.DmaId,
				ElementElementId = e.Element.ElementId,
				ParameterId = e.ParameterId,
				Index = e.Index,
			}));
        }
    }
}

//---------------------------------
// ChooseObject\ChooseObjectView.cs
//---------------------------------
namespace LogicalLayer_1.ChoseObject
{
    using LogicalLayer_1.Utils;
    using Skyline.DataMiner.Automation;
    using Skyline.DataMiner.Utils.InteractiveAutomationScript;
    using System;

    public class ChooseObjectView : Dialog
    {
        public ChooseObjectView(IEngine engine)
            : base(engine)
        {
            Title = "Choose to populate table";
            ParameterMonitor = new Button("Parameter Monitor")
            {
                Width = 200,
            };
            ElementMonitor = new Button("Element Monitor")
            {
                Width = 200,
            };
            ViewMonitor = new Button("View Monitor")
            {
                Width = 200,
            };
            ParameterMonitor.Pressed += (s, e) => OnParameterMonitorPressed?.Invoke(this, EventArgs.Empty);
            ElementMonitor.Pressed += (s, e) => OnElementMonitorPressed?.Invoke(this, EventArgs.Empty);
            ViewMonitor.Pressed += (s, e) => OnViewMonitorPressed?.Invoke(this, EventArgs.Empty);
            SetupLayout();
        }

        public event EventHandler OnParameterMonitorPressed;

        public event EventHandler OnElementMonitorPressed;

        public event EventHandler OnViewMonitorPressed;

        public Button ParameterMonitor { get; set; }

        public Button ElementMonitor { get; set; }

        public Button ViewMonitor { get; set; }

        private void SetupLayout()
        {
            int rowNumber = 0;

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: rowNumber,
                orderedWidgets: new Widget[] { ParameterMonitor });

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: ++rowNumber,
                orderedWidgets: new Widget[] { ElementMonitor });

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: ++rowNumber,
                orderedWidgets: new Widget[] { ViewMonitor });
        }
    }
}

//---------------------------------
// ParameterMonitor\ParameterMonitorEventArgs.cs
//---------------------------------
namespace LogicalLayer_1.ParameterMonitor
{
    using System;
    using Skyline.DataMiner.Automation;

    public class ParameterMonitorEventArgs : EventArgs
    {
        private readonly string _command = "ParameterMonitorModel";

        public string ParameterMonitorName { get; set; }

        public Element Element { get; set; }

        public int ParameterId { get; set; }

        public string Index { get; set; }
    }
}

//---------------------------------
// ParameterMonitor\ParameterMonitorModel.cs
//---------------------------------
namespace LogicalLayer_1.ParameterMonitor
{
    using System;
    using Skyline.DataMiner.Automation;

    public class ParameterMonitorModel
    {
        public readonly string Command = "ParameterMonitorModel";

        public string ParameterMonitorName { get; set; }

        public string ElementName { get; set; }

        public int ElementDmaId { get; set; }

        public int ElementElementId { get; set; }

        public int ParameterId { get; set; }

        public string Index { get; set; }
    }
}

//---------------------------------
// ParameterMonitor\ParameterMonitorView.cs
//---------------------------------

namespace LogicalLayer_1.ParameterMonitor
{
    public class ParameterMonitorView : Dialog
    {
        private readonly IEngine _engine;
        private readonly Label _parameterMonitorName = new Label("Parameter Monitor Name: ") { Width = 200 };
        private readonly Label _elementName = new Label("Element Name: ") { Width = 200 };
        private readonly Label _parameterId = new Label("Parameter ID: ") { Width = 200 };
        private readonly Label _index = new Label("Index: ") { Width = 200 };

        public ParameterMonitorView(IEngine engine)
            : base(engine)
        {
            _engine = engine;
            var dms = engine.GetDms();
            Title = "Parameter Monitor";
            ParameterMonitorName = new TextBox
            {
                Width = 200,
                Height = 20,
            };
            Element = new DropDown
            {
                Width = 200,
            };
            ParameterId = new TextBox
            {
                Width = 200,
                Height = 20,
            };
            Parameter = new DropDown
            {
                Width = 200,
            };
            Index = new TextBox
            {
                Width = 200,
                Height = 20,
            };
            Add = new Button("Add")
            {
                Width = 200,
            };
            Add.Pressed += (s, e) => OnAddPressed?.Invoke(this, new ParameterMonitorEventArgs
            {
                ParameterMonitorName = ParameterMonitorName.Text,
                Element = engine.FindElement(Element.Selected),
                ParameterId = Convert.ToInt32(ParameterId.Text),
                Index = Index.Text,
            });
            Element.SetOptions(LayoutDesigner.GetDropdownValuesWithSelect(dms.GetElements().Select(x => x.Name).OrderBy(x => x)));
            Element.Selected = LayoutDesigner.OptionSelected;
            Element.Changed += Element_Changed;
            SetupLayout();
        }

        private void Element_Changed(object sender, DropDown.DropDownChangedEventArgs e)
        {
            var element = _engine.FindElement(Element.Selected);
            string file = File.ReadAllText($@"C:\Skyline DataMiner\Protocols\{element.ProtocolName}\{element.ProtocolVersion}\Protocol.xml");
            Parser parser = new Parser(file);
            var protocol = new ProtocolDocumentEdit(
                new ProtocolModel(parser.Document),
                new Skyline.DataMiner.CICD.Parsers.Common.XmlEdit.XmlDocument(parser.Document));
            var displayedReadParams = protocol.Protocol.Params.Where(x => x.Type.Value == EnumParamType.Read && x.Display.RTDisplay.Value == true);
            Parameter.SetOptions(LayoutDesigner.GetDropdownValuesWithSelect(displayedReadParams.Select(x => x.Description.Value).OrderBy(x => x)));
            Parameter.Selected = LayoutDesigner.OptionSelected;
        }

        public event EventHandler<ParameterMonitorEventArgs> OnAddPressed;

        public TextBox ParameterMonitorName { get; set; }

        public DropDown Element { get; set; }

        public TextBox ParameterId { get; set; }

        public DropDown Parameter { get; set; }

        public TextBox Index { get; set; }

        public Button Add { get; set; }

        private void SetupLayout()
        {
            int rowNumber = 0;

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: rowNumber,
                orderedWidgets: new Widget[] { _parameterMonitorName, ParameterMonitorName });

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: ++rowNumber,
                orderedWidgets: new Widget[] { _elementName, Element });

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: ++rowNumber,
                orderedWidgets: new Widget[] { _parameterId, ParameterId, Parameter });

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: ++rowNumber,
                orderedWidgets: new Widget[] { _index, Index });

            LayoutDesigner.SetComponentsOnRow(
                dialog: this,
                row: ++rowNumber,
                orderedWidgets: new Widget[] { new WhiteSpace() { Width = 200 }, Add });
        }
    }
}

//---------------------------------
// Utils\LayoutDesigner.cs
//---------------------------------
namespace LogicalLayer_1.Utils
{
    using System.Collections.Generic;
    using System.Linq;
    using Skyline.DataMiner.Utils.InteractiveAutomationScript;

    public class LayoutDesigner
    {
        public static readonly string OptionSelected = "-Select-";
        public static readonly string OptionNone = "None";
        public static readonly string OptionNew = "New";
        public static readonly string OptionCustom = "Custom";

        public static string GetValidValue(string[] options, string selectedValue, string valueWhenInvalid, bool preSelect = false)
        {
            bool invalid = string.IsNullOrEmpty(selectedValue) || !options.Contains(selectedValue);
            return VerifyPreselect(options, selectedValue, valueWhenInvalid, preSelect, invalid);
        }

        public static string VerifyPreselect(string[] options, string selectedValue, string valueWhenInvalid, bool preSelect, bool invalid)
        {
            bool preSelectPossible = preSelect && options.Length != 0 && (invalid || selectedValue == LayoutDesigner.OptionSelected);
            if (preSelectPossible)
            {
                return options[0];
            }

            return invalid ? valueWhenInvalid : selectedValue;
        }

        public static void SetComponentsOnRow(Dialog dialog, int row, Widget[] orderedWidgets, int rowSpan = 1, int colSpan = 1, int startColumn = 0)
        {
            for (int columnNbr = 0; columnNbr < orderedWidgets.Length; columnNbr++)
            {
                dialog.AddWidget(orderedWidgets[columnNbr], row, columnNbr + startColumn, rowSpan, colSpan);
            }
        }

        public static void SetComponentsOnRow(Section section, int row, Widget[] orderedWidgets, int rowSpan = 1, int colSpan = 1, int startColumn = 0)
        {
            for (int columnNbr = 0; columnNbr < orderedWidgets.Length; columnNbr++)
            {
                section.AddWidget(
                    orderedWidgets[columnNbr],
                    new WidgetLayout(row, columnNbr + startColumn, rowSpan, colSpan));
            }
        }

        public static void SetComponentsOnRow(Dialog dialog, int row, Widget[] orderedWidgets, HorizontalAlignment horizontalAlignment, int rowSpan = 1, int colSpan = 1, int startColumn = 0)
        {
            for (int columnNbr = 0; columnNbr < orderedWidgets.Length; columnNbr++)
            {
                dialog.AddWidget(orderedWidgets[columnNbr], row, columnNbr + startColumn, rowSpan, colSpan, horizontalAlignment);
            }
        }

        public static IEnumerable<string> GetDropdownValuesWithSelect(IEnumerable<string> options, string defaultValue = "-Select-", bool allowNone = false)
        {
            string selectedValue;
            if (options == null)
            {
                selectedValue = !allowNone ? defaultValue : "None";
                return new List<string> { selectedValue };
            }

            List<string> optionsToDisplay = options.ToList();
            selectedValue = defaultValue;
            if (string.IsNullOrEmpty(defaultValue) || defaultValue == "-Select-")
            {
                selectedValue = !allowNone ? "-Select-" : "None";
            }

            optionsToDisplay.Add(selectedValue);
            return optionsToDisplay;
        }

        public static IEnumerable<string> GetDropdownValuesWithoutSelect(IEnumerable<string> options)
        {
            string selectedValue;
            if (options == null)
            {
                selectedValue = "None";
                return new List<string> { selectedValue };
            }

            return options.ToList();
        }
    }
}
]]>
			</Value>
			<!--<Param type="debug">true</Param>-->
			<Message />
			<Param type="ref">System.Transactions.dll</Param>
			<Param type="ref">Microsoft.CSharp.dll</Param>
			<Param type="ref">System.IO.Compression.dll</Param>
			<Param type="ref">System.Security.dll</Param>
			<Param type="ref">System.Xml.Linq.dll</Param>
			<Param type="ref">System.IdentityModel.dll</Param>
			<Param type="ref">System.Net.Http.dll</Param>
			<Param type="ref">System.Net.Http.WebRequest.dll</Param>
			<Param type="ref">System.ServiceModel.dll</Param>
			<Param type="ref">System.Numerics.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\alphafs.new\2.3.0\lib\net47\AlphaFS.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\humanizer.core\2.2.0\lib\netstandard1.0\Humanizer.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\newtonsoft.json\13.0.3\lib\net45\Newtonsoft.Json.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\nuget.frameworks\6.6.1\lib\net472\NuGet.Frameworks.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\nuget.common\6.6.1\lib\net472\NuGet.Common.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\nuget.configuration\6.6.1\lib\net472\NuGet.Configuration.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\nuget.versioning\6.6.1\lib\net472\NuGet.Versioning.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\nuget.packaging\6.6.1\lib\net472\NuGet.Packaging.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\nuget.protocol\6.6.1\lib\net472\NuGet.Protocol.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.cicd.common\1.0.4\lib\netstandard2.0\Skyline.DataMiner.CICD.Common.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.cicd.filesystem\1.0.3\lib\netstandard2.0\Skyline.DataMiner.CICD.FileSystem.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.cicd.loggers\1.0.3\lib\netstandard2.0\Skyline.DataMiner.CICD.Loggers.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.utils.interactiveautomationscripttoolkit\5.0.1\lib\net462\Skyline.DataMiner.Utils.InteractiveAutomationScriptToolkit.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.buffers\4.5.1\lib\net461\System.Buffers.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.composition.attributedmodel\1.0.31\lib\portable-net45+win8+wp8+wpa81\System.Composition.AttributedModel.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.composition.convention\1.0.31\lib\portable-net45+win8+wp8+wpa81\System.Composition.Convention.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.composition.runtime\1.0.31\lib\portable-net45+win8+wp8+wpa81\System.Composition.Runtime.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.composition.hosting\1.0.31\lib\portable-net45+win8+wp8+wpa81\System.Composition.Hosting.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.composition.typedparts\1.0.31\lib\portable-net45+win8+wp8+wpa81\System.Composition.TypedParts.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.numerics.vectors\4.5.0\lib\net46\System.Numerics.Vectors.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.runtime.compilerservices.unsafe\5.0.0\lib\net45\System.Runtime.CompilerServices.Unsafe.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.memory\4.5.4\lib\net461\System.Memory.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.collections.immutable\5.0.0\lib\net461\System.Collections.Immutable.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.reflection.metadata\5.0.0\lib\net461\System.Reflection.Metadata.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.cicd.parsers.common\1.0.11\lib\netstandard2.0\Skyline.DataMiner.CICD.Parsers.Common.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.cicd.parsers.protocol\1.0.11\lib\netstandard2.0\Skyline.DataMiner.CICD.Parsers.Protocol.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.security.principal.windows\5.0.0\lib\net461\System.Security.Principal.Windows.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.security.accesscontrol\5.0.0\lib\net461\System.Security.AccessControl.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.win32.registry\5.0.0\lib\net461\Microsoft.Win32.Registry.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.text.encoding.codepages\4.5.1\lib\net461\System.Text.Encoding.CodePages.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.threading.tasks.dataflow\7.0.0\lib\net462\System.Threading.Tasks.Dataflow.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.core.dataminersystem.common\1.1.1.9\lib\net462\Skyline.DataMiner.Core.DataMinerSystem.Common.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.core.dataminersystem.automation\1.1.1.9\lib\net462\Skyline.DataMiner.Core.DataMinerSystem.Automation.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.threading.tasks.extensions\4.5.4\lib\net461\System.Threading.Tasks.Extensions.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.bcl.asyncinterfaces\5.0.0\lib\net461\Microsoft.Bcl.AsyncInterfaces.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.common\3.11.0\lib\netstandard2.0\cs\Microsoft.CodeAnalysis.resources.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.common\3.11.0\lib\netstandard2.0\Microsoft.CodeAnalysis.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.csharp\3.11.0\lib\netstandard2.0\cs\Microsoft.CodeAnalysis.CSharp.resources.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.csharp\3.11.0\lib\netstandard2.0\Microsoft.CodeAnalysis.CSharp.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.scripting.common\3.11.0\lib\netstandard2.0\cs\Microsoft.CodeAnalysis.Scripting.resources.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.scripting.common\3.11.0\lib\netstandard2.0\Microsoft.CodeAnalysis.Scripting.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.csharp.scripting\3.11.0\lib\netstandard2.0\cs\Microsoft.CodeAnalysis.CSharp.Scripting.resources.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.csharp.scripting\3.11.0\lib\netstandard2.0\Microsoft.CodeAnalysis.CSharp.Scripting.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\system.io.pipelines\5.0.1\lib\net461\System.IO.Pipelines.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.workspaces.common\3.11.0\lib\netstandard2.0\cs\Microsoft.CodeAnalysis.Workspaces.resources.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.workspaces.common\3.11.0\lib\netstandard2.0\Microsoft.CodeAnalysis.Workspaces.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.csharp.workspaces\3.11.0\lib\netstandard2.0\cs\Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\microsoft.codeanalysis.csharp.workspaces\3.11.0\lib\netstandard2.0\Microsoft.CodeAnalysis.CSharp.Workspaces.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.cicd.models.common\1.0.11\lib\netstandard2.0\Skyline.DataMiner.CICD.Models.Common.dll</Param>
			<Param type="ref">C:\Skyline DataMiner\ProtocolScripts\DllImport\skyline.dataminer.cicd.models.protocol\1.0.11\lib\netstandard2.0\Skyline.DataMiner.CICD.Models.Protocol.dll</Param>
		</Exe>
	</Script>
</DMSScript>